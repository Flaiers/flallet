// Package v1 GENERATED BY SWAG; DO NOT EDIT
// This file was generated by swaggo/swag
package v1

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "https://swagger.io/terms",
        "contact": {
            "name": "Maxim Bigin",
            "url": "https://flaiers.me",
            "email": "i@flaiers.me"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "https://www.apache.org/licenses/LICENSE-2.0"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/reports/csv": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "reports"
                ],
                "summary": "Get CSV Report",
                "operationId": "getCSVReport",
                "parameters": [
                    {
                        "description": " ",
                        "name": "reportFilter",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.ReportFilter"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.ReportRead"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/utils.JSONError"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/utils.JSONError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.JSONError"
                        }
                    }
                }
            }
        },
        "/reservations": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "reservations"
                ],
                "summary": "Create Reservation",
                "operationId": "createReservation",
                "parameters": [
                    {
                        "description": " ",
                        "name": "reservationCreate",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.ReservationCreate"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/dto.ReservationRead"
                        }
                    },
                    "402": {
                        "description": "Payment Required",
                        "schema": {
                            "$ref": "#/definitions/utils.JSONError"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/utils.JSONError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.JSONError"
                        }
                    }
                }
            }
        },
        "/reservations/approve": {
            "delete": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "reservations"
                ],
                "summary": "Approve Reservation",
                "operationId": "approveReservation",
                "parameters": [
                    {
                        "description": " ",
                        "name": "reservationFilter",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.ReservationFilter"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.ReservationRead"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/utils.JSONError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.JSONError"
                        }
                    }
                }
            }
        },
        "/reservations/reject": {
            "delete": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "reservations"
                ],
                "summary": "Reject Reservation",
                "operationId": "rejectReservation",
                "parameters": [
                    {
                        "description": " ",
                        "name": "reservationFilter",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.ReservationFilter"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.ReservationRead"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/utils.JSONError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.JSONError"
                        }
                    }
                }
            }
        },
        "/transactions": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "transactions"
                ],
                "summary": "Read Transactions",
                "operationId": "readTransactions",
                "parameters": [
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": " ",
                        "name": "userId",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "default": 1,
                        "description": " ",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 50,
                        "description": " ",
                        "name": "size",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "asc",
                            "desc"
                        ],
                        "type": "string",
                        "name": "orderByAmount",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "asc",
                            "desc"
                        ],
                        "type": "string",
                        "name": "orderByCreatedAt",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/pkg.Pagination"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "items": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/dto.TransactionRead"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/utils.JSONError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.JSONError"
                        }
                    }
                }
            }
        },
        "/users/{userId}": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Read User Balance",
                "operationId": "readUserBalance",
                "parameters": [
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": " ",
                        "name": "userId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.UserRead"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/utils.JSONError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.JSONError"
                        }
                    }
                }
            }
        },
        "/users/{userId}/accrue": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Accrue User Balance",
                "operationId": "accrueUserBalance",
                "parameters": [
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": " ",
                        "name": "userId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": " ",
                        "name": "userAccrual",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.UserAccrual"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.UserRead"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/utils.JSONError"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/utils.JSONError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.JSONError"
                        }
                    }
                }
            }
        },
        "/users/{userId}/transfer": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Transfer User Balance",
                "operationId": "transferUserBalance",
                "parameters": [
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": " ",
                        "name": "userId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": " ",
                        "name": "UserTransfer",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.UserTransfer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.UserRead"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/utils.JSONError"
                        }
                    },
                    "402": {
                        "description": "Payment Required",
                        "schema": {
                            "$ref": "#/definitions/utils.JSONError"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/utils.JSONError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.JSONError"
                        }
                    }
                }
            }
        },
        "/users/{userId}/withdraw": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Withdraw User Balance",
                "operationId": "withdrawUserBalance",
                "parameters": [
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": " ",
                        "name": "userId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": " ",
                        "name": "userWithdrawal",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.UserWithdrawal"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.UserRead"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/utils.JSONError"
                        }
                    },
                    "402": {
                        "description": "Payment Required",
                        "schema": {
                            "$ref": "#/definitions/utils.JSONError"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/utils.JSONError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.JSONError"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "dto.ReportFilter": {
            "type": "object",
            "required": [
                "month",
                "year"
            ],
            "properties": {
                "month": {
                    "type": "integer"
                },
                "year": {
                    "type": "integer"
                }
            }
        },
        "dto.ReportRead": {
            "type": "object",
            "properties": {
                "url": {
                    "type": "string"
                }
            }
        },
        "dto.ReservationCreate": {
            "type": "object",
            "required": [
                "amount",
                "orderId",
                "serviceId",
                "userId"
            ],
            "properties": {
                "amount": {
                    "type": "integer"
                },
                "orderId": {
                    "type": "string",
                    "format": "uuid"
                },
                "serviceId": {
                    "type": "string",
                    "format": "uuid"
                },
                "userId": {
                    "type": "string",
                    "format": "uuid"
                }
            }
        },
        "dto.ReservationFilter": {
            "type": "object",
            "required": [
                "amount",
                "orderId",
                "serviceId",
                "userId"
            ],
            "properties": {
                "amount": {
                    "type": "integer"
                },
                "orderId": {
                    "type": "string",
                    "format": "uuid"
                },
                "serviceId": {
                    "type": "string",
                    "format": "uuid"
                },
                "userId": {
                    "type": "string",
                    "format": "uuid"
                }
            }
        },
        "dto.ReservationRead": {
            "type": "object",
            "properties": {
                "amount": {
                    "type": "integer"
                },
                "createdAt": {
                    "type": "string"
                },
                "id": {
                    "type": "string",
                    "format": "uuid"
                },
                "orderId": {
                    "type": "string",
                    "format": "uuid"
                },
                "serviceId": {
                    "type": "string",
                    "format": "uuid"
                },
                "userId": {
                    "type": "string",
                    "format": "uuid"
                }
            }
        },
        "dto.TransactionRead": {
            "type": "object",
            "properties": {
                "amount": {
                    "type": "integer"
                },
                "createdAt": {
                    "type": "string"
                },
                "id": {
                    "type": "string",
                    "format": "uuid"
                },
                "orderId": {
                    "type": "string",
                    "format": "uuid"
                },
                "serviceId": {
                    "type": "string",
                    "format": "uuid"
                },
                "status": {
                    "type": "string",
                    "enum": [
                        "pending",
                        "approved",
                        "rejected"
                    ]
                },
                "type": {
                    "type": "string",
                    "enum": [
                        "accrual",
                        "withdrawal",
                        "transfer"
                    ]
                },
                "userId": {
                    "type": "string",
                    "format": "uuid"
                }
            }
        },
        "dto.UserAccrual": {
            "type": "object",
            "required": [
                "amount"
            ],
            "properties": {
                "amount": {
                    "type": "integer"
                },
                "orderId": {
                    "type": "string",
                    "format": "uuid"
                },
                "serviceId": {
                    "type": "string",
                    "format": "uuid"
                }
            }
        },
        "dto.UserRead": {
            "type": "object",
            "properties": {
                "balance": {
                    "type": "integer"
                },
                "createdAt": {
                    "type": "string",
                    "format": "date-time"
                },
                "id": {
                    "type": "string",
                    "format": "uuid"
                }
            }
        },
        "dto.UserTransfer": {
            "type": "object",
            "required": [
                "amount",
                "userId"
            ],
            "properties": {
                "amount": {
                    "type": "integer"
                },
                "userId": {
                    "type": "string",
                    "format": "uuid"
                }
            }
        },
        "dto.UserWithdrawal": {
            "type": "object",
            "required": [
                "amount"
            ],
            "properties": {
                "amount": {
                    "type": "integer"
                },
                "orderId": {
                    "type": "string",
                    "format": "uuid"
                },
                "serviceId": {
                    "type": "string",
                    "format": "uuid"
                }
            }
        },
        "pkg.Pagination": {
            "type": "object",
            "properties": {
                "items": {},
                "page": {
                    "type": "integer"
                },
                "size": {
                    "type": "integer"
                },
                "total": {
                    "type": "integer"
                }
            }
        },
        "utils.JSONError": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "boolean"
                },
                "message": {
                    "type": "string"
                }
            }
        }
    },
    "securityDefinitions": {
        "ApiKeyAuth": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        },
        "BasicAuth": {
            "type": "basic"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "",
	BasePath:         "/api/v1",
	Schemes:          []string{},
	Title:            "Flallet API",
	Description:      "REST API for working with user balance",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
